<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:p="http://www.springframework.org/schema/p"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:mvc="http://www.springframework.org/schema/mvc"
    xsi:schemaLocation="
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/mvc
        http://www.springframework.org/schema/mvc/spring-mvc.xsd">

    <context:component-scan base-package="java100.app"/>


    <bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter">
        <property name="messageConverters">
	        <list>
	            <bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter"/>
	            
	            <bean class="org.springframework.http.converter.StringHttpMessageConverter"/>
	        </list>
	    </property>
    </bean>
    
    <!-- 멀티파트 형식으로 전송된 데이터를 처리할 객체를 등록한다. -->
    <!-- 방법1: Apache의 commons-fileupload 라이브러리를 사용할 때 등록할 객체 -->
    
    <bean id="multipartResolver" 
          class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <property name="maxUploadSize" value="5000000"/>
    </bean>
     
    <!-- 기본 ViewResolver를 교체한다. -->
    <bean id="viewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
    
        <!-- JSTL을 사용할 경우 다음 뷰 처리기를 등록해야 한다. -->
        <property name="viewClass" value="org.springframework.web.servlet.view.JstlView"/>
    
        <!-- 요청 핸들러가 리턴한 값에 앞뒤에 붙일 텍스트이다.
             프론트 컨트롤러는 이 값을 가지고 뷰를 실행한다. -->
        <property name="prefix" value="/WEB-INF/jsp/"/>
        <property name="suffix" value=".jsp"/>
    </bean>
    
    <bean id= "sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <property name="mapperLocations" value="classpath*:java100/app/dao/mysql/*Dao.xml" />
        <property name="typeAliasesPackage" value="java100.app.domain"/>
    </bean>
    
    <bean id="dataSource" class="org.apache.commons.dbcp2.BasicDataSource" destroy-method="close">
        <property name="driverClassName" value="${jdbc.driverClassName}" />
        <property name="url" value="${jdbc.url}" />
        <property name="username" value="${jdbc.username}" />
        <property name="password" value="${jdbc.password}" />
    </bean>
    
    <context:property-placeholder location="classpath*:java100/app/jdbc.properties"/>
    
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="java100.app.dao" />
    </bean>
    
    <mvc:interceptors>
        <mvc:interceptor>
            <mvc:mapping path="/**"/>
            <mvc:exclude-mapping path="/auth/**"/>
            <bean class="java100.app.web.interceptor.AuthInterceptor"/>
        </mvc:interceptor>
    </mvc:interceptors>
    
</beans>







